version: '3'

dotenv: ['.env']

tasks:
  get-llvm:
    desc: "Clone the llvm-project repository"
    cmds:
      - |
        if [ -d "llvm-project" ]; then
          echo "llvm-project directory already exists. Skipping clone."
        else
          git clone https://github.com/llvm/llvm-project.git
        fi

  config-llvm:
    desc: "Configure the llvm-project repository"
    cmds:
      - |
        if [ -d "llvm-project" ]; then
          cd llvm-project
          mkdir -p build
          cd build
          cmake \
            -DLLVM_ENABLE_PROJECTS="clang;lld;compiler-rt" \
            -DCMAKE_BUILD_TYPE="Release" \
            -DLLVM_TARGETS_TO_BUILD=X86 \
            -DLLVM_ENABLE_DUMP=ON \
            -DBUILD_SHARED_LIBS=ON \
            -G Ninja ../llvm
          cd ../..
        else
          echo "llvm-project directory does not exist. Please run 'task get-llvm' first."
        fi

  build-llvm:
    desc: "Build the llvm-project repository"
    cmds:
      - |
        if [ -d "llvm-project" ]; then
          cd llvm-project/build
          ninja
          cd ../..
        else
          echo "llvm-project directory does not exist. Please run 'task get-llvm' and 'task configure-llvm' first."
        fi

  get-linux:
    desc: "Clone the linux kernel repository"
    cmds:
      - |
        if [ -d "linux" ]; then
          echo "linux directory already exists. Skipping clone."
        else
          git clone https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git
          task set-linux-version
        fi

  set-linux-version:
    desc: "Checkout the Linux version at v${LINUX_VERSION} in .env"
    cmds:
      - |
        if [ -d "linux" ]; then
          cd linux
          git checkout v$LINUX_VERSION
          cd ..
        else
          echo "linux directory does not exist. Please run 'task get-linux' first."
        fi

  config-linux:
    desc: "Configure the linux kernel repository"
    cmds:
      - |
        if [ -d "linux" ]; then
          cd linux
          make clean
          make mrproper
          make allyesconfig
          make menuconfig
          cd ..
        else
          echo "linux directory does not exist. Please run 'task get-linux' first."
        fi

  build-linux:
    desc: "Build the linux kernel repository"
    cmds:
      - |
        if [ -d "linux" ]; then
          cd linux
          make -j$(nproc) CC=wllvm LLVM=$PWD/../llvm-project/build/bin/ KCFLAGS="-g"
          cd ..
        else
          echo "linux directory does not exist. Please run 'task get-linux' first."
        fi

  gen-linux-bc:
    desc: "Find all .bc files and move them to linux-<VERSION>-bc preserving directory structure"
    cmds:
      - |
        if [ -d "linux" ]; then
          BC_DIR="linux-${LINUX_VERSION}-bc"
          mkdir -p $BC_DIR
          #.bc files were created after the .o files at the compilation stage. 
          find ./linux -name '*.o.bc' | while read -r file; do
            # Remove the leading ./linux/ from the file path
            relative_path="${file#./linux/}"
            # Get the directory of the relative path
            dir=$(dirname "$relative_path")
            # Get the base name without the .o.bc extension
            base=$(basename "$relative_path" .o.bc)
            # Create the corresponding directory structure in the destination base
            mkdir -p "$BC_DIR/$dir"
            # Copy the file to the new location with the modified name
            cp "$file" "$BC_DIR/$dir/${base}.bc"
          done

          # Find all files starting with a dot
          find ./$BC_DIR -type f -name '.*' | while read -r file; do
            # Get the directory of the current file
            dir=$(dirname "$file")
            # Get the base name of the file
            base=$(basename "$file")
            # Remove the leading dot
            new_base="${base#.}"
            # Construct the new file path
            new_file="$dir/$new_base"
            # Rename the file
            mv "$file" "$new_file"
          done
        else
          echo "linux directory does not exist. Please run 'task get-linux' first."
        fi

  gen-linux-ll:
    desc: "Generate LLVM IR (.ll) files from .bc files and move them to linux-ll preserving directory structure"
    cmds:
      - |
        if [ -d "linux" ]; then
          BC_DIR="linux-${LINUX_VERSION}-bc"
          LL_DIR="linux-${LINUX_VERSION}-ll"
          if [ ! -d "$BC_DIR" ]; then
            echo "Error: $BC_DIR directory does not exist. Please run 'task gen-linux-bc' first."
            exit 1
          fi

          mkdir -p $LL_DIR
          find ./$BC_DIR -name '*.bc' | while read -r file; do
            # Remove the leading ./$BC_DIR/ from the file path
            relative_path="${file#./$BC_DIR/}"
            # Get the directory of the relative path
            dir=$(dirname "$relative_path")
            # Get the base name without the .bc extension
            base=$(basename "$relative_path" .bc)
            # Create the corresponding directory structure in the destination base
            mkdir -p "$LL_DIR/$dir"
            # Generate the LLVM IR (.ll) file and move it to the new location
            llvm-project/build/bin/llvm-dis "$file" -o "$LL_DIR/$dir/${base}.ll"
          done
        else
          echo "linux directory does not exist. Please run 'task get-linux' first."
        fi

  build-pass:
    desc: "Build the LLVM passes"
    cmds:
      - |
        llvm-project/build/bin/clang++ -fPIC -shared -o passes/syncprimitives.so passes/SyncPrimitives.cpp `llvm-project/build/bin/llvm-config --cxxflags --ldflags --system-libs --libs core support`

  run-pass:
    desc: "Run LLVM pass on every .ll file in linux-${LINUX_VERSION}-ll and save the results"
    cmds:
      - |
        if [ -d "linux-${LINUX_VERSION}-ll" ]; then
          LL_DIR="linux-${LINUX_VERSION}-ll"
          OUTPUT_DIR="passes-out"
          find ./$LL_DIR -name '*.ll' | while read -r file; do
            relative_path="${file#./$LL_DIR/}"
            dir=$(dirname "$relative_path")
            base=$(basename "$relative_path" .ll)
            mkdir -p "$OUTPUT_DIR/$dir"
            output_file="$OUTPUT_DIR/$dir/$base.txt"

            # Check if output file already exists
            if [ -f "$output_file" ]; then
              echo "Skipping $file, output already exists at $output_file"
              continue
            else
              echo "[BUILDING] $output_file"
            fi

            # Run the LLVM pass
            timeout 1 llvm-project/build/bin/opt -debug-pass-manager -load-pass-plugin=./passes/syncprimitives.so -passes=sync-primitives -disable-output "$file" > "$output_file" 2>&1

            # Check if the process was killed due to OOM
            if [ $? -eq 137 ]; then
              echo "Process was killed (likely due to OOM). Exiting."
              exit 137
            fi

            # Remove the .ll file after processing
            rm -f "$file"
          done
        else
          echo "linux-${LINUX_VERSION}-ll directory does not exist. Please run the tasks to generate .ll files first."
        fi
